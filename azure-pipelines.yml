trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'manage-courses-support-poc'
  dockerOverride: 'docker-compose -f docker-compose.yaml'

steps:
- script: |
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    docker_path=$(dockerHubUsername)/$(imageName)
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=docker_path;]$docker_path"
  displayName: 'Set version number'

- script: docker pull $(docker_path):latest || true
  displayName: "Pull latest docker image to cache"

- script: |
    $DOCKER_OVERRIDE build
    $DOCKER_OVERRIDE up --no-build -d
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "./wait-for-it.sh db:5432"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rails db:setup"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake assets:precompile"
  displayName: 'Build image'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)

- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c 'bundle exec rake spec SPEC_OPTS="--format RspecJunitFormatter"' >rspec-results.xml
    test_result=$?
    cat rspec-results.xml
    sed -i '$d;1,5d' rspec-results.xml
    if [ "$test_result" == "0" ] ; then true ; else false ; fi
  displayName: 'Execute tests'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)

- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake lint_ruby"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake lint_scss" >lint-results.xml
    echo ------lintoutput------
    cat lint-results.xml
  displayName: 'Execute linters'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)

- task: Docker@1
  displayName: Tag image with current build number $(Build.BuildNumber)
  inputs:
    command: Tag image
    imageName: "$(docker_path):latest"
    arguments: "$(docker_path):$(Build.BuildNumber)"

- task: Docker@1
  displayName: Docker Hub login
  inputs:
    command: "login"
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: DfE Docker Hub

- task: Docker@1
  displayName: Push tagged image
  inputs:
    command: Push an image
    imageName: "$(docker_path):$(Build.BuildNumber)"

- task: Docker@1
  displayName: Push tagged image (latest) if master
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: Push an image
    imageName: "$(docker_path):latest"

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
    failedTaskOnFailedTest: true
