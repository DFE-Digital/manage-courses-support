trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'manage-courses-support-poc'
  # Support multiple docker-compose files to allow travis and az pipelines to co exist: https://docs.docker.com/compose/extends/#multiple-compose-files
  dockerOverride: 'docker-compose -f docker-compose.yaml -f docker-compose.az.yml'

steps:
- script: |
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    docker_path=$(dockerHubUsername)/$(imageName)
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=docker_path;]$docker_path"
  displayName: 'Set version number'

- script: |
    $DOCKER_OVERRIDE build
    $DOCKER_OVERRIDE up --no-build -d
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "./wait-for-it.sh db:5432"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rails db:setup"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake assets:precompile"
  displayName: 'Build image'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)

- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c 'bundle exec rake spec SPEC_OPTS="--format RspecJunitFormatter --out ./rspec-results.xml"'
  displayName: 'Execute tests'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)

- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rubocop app config db lib spec Gemfile --format clang -a"
  displayName: 'Execute linters'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)

- script: |
    echo $password | docker login --username $(dockerHubUsername) --password-stdin
    docker tag "$(docker_path):latest" "$(docker_path):$(Build.BuildNumber)"
    docker push "$(docker_path):$(Build.BuildNumber)"
  displayName: 'Push image'
  env:
    password: $(dockerHubPassword)

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
